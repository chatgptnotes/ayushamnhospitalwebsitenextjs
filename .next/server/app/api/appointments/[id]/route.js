"use strict";(()=>{var e={};e.id=499,e.ids=[499],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3823:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>h,patchFetch:()=>f,requestAsyncStorage:()=>c,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var r={};n.r(r),n.d(r,{PATCH:()=>d});var o=n(9303),s=n(8716),a=n(670),i=n(7070),p=n(2021),u=n(6040);async function d(e,{params:t}){try{await (0,p.Z)();let{id:n}=t,{status:r}=await e.json();if(!["pending","completed","cancelled"].includes(r))return i.NextResponse.json({success:!1,error:"Invalid status"},{status:400});let o=await u.Z.findByIdAndUpdate(n,{status:r},{new:!0});if(!o)return i.NextResponse.json({success:!1,error:"Appointment not found"},{status:404});return i.NextResponse.json({success:!0,data:o})}catch(e){return console.error("Error updating appointment status:",e),i.NextResponse.json({success:!1,error:"Failed to update status"},{status:500})}}let l=new o.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/appointments/[id]/route",pathname:"/api/appointments/[id]",filename:"route",bundlePath:"app/api/appointments/[id]/route"},resolvedPagePath:"C:\\Users\\DELL\\Desktop\\project\\ayushamnhospitalwebsitenextjs\\app\\api\\appointments\\[id]\\route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:g}=l,h="/api/appointments/[id]/route";function f(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},2021:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(1185),o=n.n(r);let s="mongodb+srv://chatgptnotes:64SMNPCaginm5gaf@cluster0.phaz6c2.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";if(!s)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let a=global.mongoose||{conn:null,promise:null};global.mongoose||(global.mongoose=a);let i=async function(){if(a.conn)return a.conn;a.promise||(a.promise=o().connect(s,{bufferCommands:!1}).then(e=>(console.log("Connected to MongoDB Atlas"),e)).catch(e=>{throw console.error("MongoDB connection error:",e),e}));try{a.conn=await a.promise}catch(e){throw a.promise=null,e}return a.conn}},6040:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(1185),o=n.n(r);let s=new(o()).Schema({name:{type:String,required:[!0,"Name is required"]},phone:{type:String,required:[!0,"Phone number is required"]},email:{type:String,required:!1},treatment:{type:String,required:!1},message:{type:String,required:!1},status:{type:String,enum:["pending","completed","cancelled"],default:"pending"},timestamp:{type:Date,default:Date.now}}),a=o().models.Appointment||o().model("Appointment",s)}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[948,972],()=>n(3823));module.exports=r})();